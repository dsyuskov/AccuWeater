{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","result","searchCity","serchResult","bind","onChange","onLoadData","this","setState","fetch","then","response","json","catch","error","event","target","value","cod","className","item","React","Component","Search","type","Table","name","sys","country","main","temp","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.85385bbb.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nconst PATH_BASE = 'https://api.openweathermap.org/data/2.5/weather';\nconst API_KEY = 'APPID=d5ecba2b149b9cdfb1fea656c735177d';\nconst API_SYSTEM = 'units=metric';\nconst PATH_SEARCH = 'q=';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      result: null,\n      searchCity: 'Balashov'\n    }\n \n    this.serchResult = this.serchResult.bind(this);\n    this.onChange = this.onChange.bind(this);  \n    this.onLoadData = this.onLoadData.bind(this);\n  }\n \n  serchResult(result) {        \n    this.setState({ result })            \n  }\n \n  onLoadData(searchCity) {    \n    fetch(`${PATH_BASE}?${API_KEY}&${API_SYSTEM}&${PATH_SEARCH}${searchCity}`)\n      .then(response => response.json())\n      .then(result => {this.serchResult(result)})    \n      .catch(error => error);\n  }\n\n  componentDidMount() {\n    this.onLoadData(this.state.searchCity)\n  }\n\n  onChange(event) {    \n    this.setState({ searchCity: event.target.value})        \n    this.onLoadData(event.target.value);    \n  }\n\n  render() {     \n    const {result, searchCity} = this.state\n\n    if (!result) return null;  \n       \n    switch(result.cod) {\n      case '404': {        \n        return (\n          <div className='app'> \n            <Search \n              value = {searchCity}\n              onChange = {this.onChange}\n            />          \n          <h3>Город не найден</h3>           \n        </div>        \n        )        \n      }\n\n      case 200: {        \n        return (      \n          <div className='app'> \n            <Search \n              value = {searchCity}\n              onChange = {this.onChange}\n            />             \n            <Table \n              item = {result}              \n            />           \n          </div>          \n        );        \n      }      \n\n      default: {\n        return (      \n          <div className='app'> \n            <Search \n              value = {searchCity}\n              onChange = {this.onChange}\n            />                                \n          </div>          \n        );        \n      }\n    }    \n  }\n}\n\nclass Search extends React.Component {\n  render() {\n    const {value, onChange} = this.props\n    return (\n      <form className='search'> \n        <h3>Введите название города</h3>\n        <input \n          className = 'search__input'\n          type = 'text'\n          value = {value}\n          onChange = {onChange}\n        />\n      </form>      \n    )\n  }\n}\n\nclass Table extends React.Component {\n  render() {\n    const {item} = this.props;\n    return(                   \n      <table className=\"result-table\">\n        <tr>\n          <td className=\"result-table__item\">Город</td>\n          <td className=\"result-table__item\">{item.name}</td>\n        </tr>\n        <tr>\n          <td className=\"result-table__item\">Страна</td>\n          <td className=\"result-table__item\">{item.sys.country}</td>\n        </tr>\n        <tr>\n          <td className=\"result-table__item\">Температура</td>\n          <td className=\"result-table__item\">{item.main.temp}</td>\n        </tr>\n      </table>            \n    )       \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\nif (module.hot) {\n    module.hot.accept();\n}"],"sourceRoot":""}